//Combined and simplified version of both modify_cells.hoc and make_net.hoc for use with BulletinBoard.hoc
//Started 27 June, 2016, JAllen
//Updated Feb , 2018 , M.M ( changing parameters of single Cell ( when Cell_num =1))
//Updated Oct, 2018 , M.M ( accomodating even number of cells)
//Updated Oct, 2018 , M.M (builting spreadthresh2 to distributed the shift in non-linear way [reciprocal])
// Updated 2021, M.M ( adding mousa ,2020 spatial distribution of CaPIC)

//ARG 1: ???
//ARG 2: Do_somatofugal or somatopetal
//ARG 3: Cell Object
proc ComputeElectrotonicDistance() { local x, zn  localobj zz
	zz = new Impedance()
	$o3.soma zz.loc(0.5) 										// sets origin for impedance calculations to middle of soma
	zz.compute($1, 1) 											// takes contributions of gating state DEs into account
																// mechanisms must be compatible with CVODE

	if ($2) { 													// do_somatofugal
		$o3.soma zn = zz.input(0.5) 							// input impedance of cell at soma(0.5)
	}

	forsec $o3.all if (ismembrane("info")) { 					// iterate over all sections of cell instance $o3 that contain the info mechanism
		for (x,0) {
			if ($2) { 											// do_somatofugal
				ElectroDist_info(x) = -log(zz.transfer(x)/zn) 	// as if soma(0.5) were clamped to 1 mV and v is observed at den...(x)
			} else { 											// somatopetal
				ElectroDist_info(x) = -log(zz.ratio(x)) 		// as if den...(x) were clamped to 1 mV and v is observed at soma(0.5)
			}
		}
	}
} // End of procedure

//ARG 1: Proximal electrotonic distance limit
//ARG 2: Distal Electrotonic distance limit
//ARG 3: Conductance of LLVA Channels
//ARG 4: Cell object.
//Arg 5: Lower limit for theta
//Arg 6: Upper limit for theta
//Arg 7: number of cells
//Arg 8: MN Number (within type) 	//NEW
//Arg 9: Neuromodulatory state 		//NEW
proc  CavDendChannels() {
	print "CaPIC on!! - group of ",$7,"Cells ,Cell# ",$8,"."
	rangeLLVA = $6-$5
	if($7==1){
		stepLLVA = rangeLLVA*0.5
	} else {
		stepLLVA = rangeLLVA/($7-1)
	}
										//numcells of class-1
	forsec $o4.den {
			insert Llva
			gcaLlvabar_Llva = 0.00
			theta_m_Llva = $5 + stepLLVA*$8							//MUST get this to step.  Might need to define step externally?
			tau_m_Llva = 60
			kappa_m_Llva = -6

		for(x){
			if($1<=ElectroDist_info(x) && ElectroDist_info(x)<=$2){
				gcaLlvabar_Llva(x) = $3*$9 // conductance * NeuroMod
			}
		}
	}
}	//End of Proc

//Arg 1: Proximal boundary
//Arg 2: Distal boundary
//Arg 3: Channel Conductance
//Arg 4: Cell object
//Arg 5: Lower limit for theta
//Arg 6: Upper limit for theta
//Arg 7: number of cells
//Arg 8: MN number
//Arg 9: Neuromodulatory State
proc makeLLVA(){

	finitialize(v_init)  										// may be replaced by a custom initialization if necessary
	do_somatofugal = 1 											// 1 to base distances on somatofugal voltage attenuation, 0 for somatopetal
	ComputeElectrotonicDistance(1, do_somatofugal, $o4)  		// Calculate the electrotonic distance of each section from the soma
	CavDendChannels($1, $2, $3, $o4, $5, $6, $7, $8, $9)			// Place channels and set conductance.
}	//End of Proc


// This procedure spreads the firing threshold among cells in a list, starting from the lower range value and up
// Arg 1: cell object
// Arg 2: lower range value
// Arg 3: higher range value
// Arg 4: Number of Cells in class
// Arg 5: Cell number within class.
proc SpreadThresh() {local range, step , baseShift
	// print "Set ShiftThreshold of cell:", $2," ,", $3
	range 		= $3 - $2
	baseShift 	= $2 + 62

	if($4 >= 2){
		step = range/($4-1)
		$o1.Vspike = $o1.ShiftThreshold(baseShift + step*$5)
		$o1.ShiftThreshold(baseShift + step*$5)

	} else if($4==1){
		$o1.Vspike = $o1.ShiftThreshold(baseShift+ range*0.5)
		$o1.ShiftThreshold(baseShift + range*0.5)
	}

} //End of Proc


// This procedure spreads the input resistance among cells in a list, starting from the higher range value and down
// Arg 1: cell object
// Arg 2: soma lower range value
// Arg 3: soma higher range value
// Arg 4: dend lower range value
// Arg 5: dend higher range value
// Arg 6: number of cells of class to be created.
// Arg 7: cell number within class.
proc SpreadRin() { local SomaRange, SomaStep, DendRange, DendStep

	SomaRange = $3 - $2
	DendRange = $5 - $4

	if($6 >= 2){

		SomaStep = SomaRange/($6-1)
		DendStep = DendRange/($6-1)

			object_push($o1)
			forsec "soma"	{g_pas = 1/($3-SomaStep*$7)}
			forsec "iseg"	{g_pas = 1/($3-SomaStep*$7)}
			forsec "ah" 	{g_pas = 1/($3-SomaStep*$7)}
			forsec "den" 	{g_pas = 1/($5-DendStep*$7)}
			object_pop()

	} else if($6==1) {
			object_push($o1)
			forsec "soma"	{g_pas = 1/($3-SomaRange*0.5)}
			forsec "iseg"	{g_pas = 1/($3-SomaRange*0.5)}
			forsec "ah"	{g_pas = 1/($3-SomaRange*0.5)}
			forsec "den"	{g_pas = 1/($5-DendRange*0.5)}
			object_pop()
	}
} //End of Proc

